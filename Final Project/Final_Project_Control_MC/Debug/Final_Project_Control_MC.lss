
Final_Project_Control_MC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000023e8  0000247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  00002496  2**0
                  ALLOC
  3 .stab         00002688  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000149a  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000626a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <main>
      8a:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <PWM_Timer0_Start>:
#include"pwm.h"
#include"gpio.h"
#include<avr/io.h>


void PWM_Timer0_Start(uint8 duty_cycle){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <PWM_Timer0_Start+0x6>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
    11cc:	8a 83       	std	Y+2, r24	; 0x02
	TCNT0 = 0; // Set Timer Initial Value to 0
    11ce:	e2 e5       	ldi	r30, 0x52	; 82
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	10 82       	st	Z, r1

	uint8 speed = (255);
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	89 83       	std	Y+1, r24	; 0x01

	OCR0  = speed;
    11d8:	ec e5       	ldi	r30, 0x5C	; 92
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	63 e0       	ldi	r22, 0x03	; 3
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    11ea:	e3 e5       	ldi	r30, 0x53	; 83
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8a e6       	ldi	r24, 0x6A	; 106
    11f0:	80 83       	st	Z, r24
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <__vector_9>:
#include"timer1.h"
#include<avr/interrupt.h>

void (*timer1_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect){
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	2f 93       	push	r18
    1208:	3f 93       	push	r19
    120a:	4f 93       	push	r20
    120c:	5f 93       	push	r21
    120e:	6f 93       	push	r22
    1210:	7f 93       	push	r23
    1212:	8f 93       	push	r24
    1214:	9f 93       	push	r25
    1216:	af 93       	push	r26
    1218:	bf 93       	push	r27
    121a:	ef 93       	push	r30
    121c:	ff 93       	push	r31
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    1226:	80 91 7a 00 	lds	r24, 0x007A
    122a:	90 91 7b 00 	lds	r25, 0x007B
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	29 f0       	breq	.+10     	; 0x123c <__vector_9+0x40>
	{
		(*timer1_callBackPtr)();
    1232:	e0 91 7a 00 	lds	r30, 0x007A
    1236:	f0 91 7b 00 	lds	r31, 0x007B
    123a:	09 95       	icall
	}
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	if(timer1_callBackPtr != NULL_PTR)
    128c:	80 91 7a 00 	lds	r24, 0x007A
    1290:	90 91 7b 00 	lds	r25, 0x007B
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	29 f0       	breq	.+10     	; 0x12a2 <__vector_7+0x40>
	{
		(*timer1_callBackPtr)();
    1298:	e0 91 7a 00 	lds	r30, 0x007A
    129c:	f0 91 7b 00 	lds	r31, 0x007B
    12a0:	09 95       	icall
	}
}
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	ff 91       	pop	r31
    12a8:	ef 91       	pop	r30
    12aa:	bf 91       	pop	r27
    12ac:	af 91       	pop	r26
    12ae:	9f 91       	pop	r25
    12b0:	8f 91       	pop	r24
    12b2:	7f 91       	pop	r23
    12b4:	6f 91       	pop	r22
    12b6:	5f 91       	pop	r21
    12b8:	4f 91       	pop	r20
    12ba:	3f 91       	pop	r19
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <Timer1_init+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    12d6:	ac e4       	ldi	r26, 0x4C	; 76
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e9 81       	ldd	r30, Y+1	; 0x01
    12dc:	fa 81       	ldd	r31, Y+2	; 0x02
    12de:	80 81       	ld	r24, Z
    12e0:	91 81       	ldd	r25, Z+1	; 0x01
    12e2:	11 96       	adiw	r26, 0x01	; 1
    12e4:	9c 93       	st	X, r25
    12e6:	8e 93       	st	-X, r24
	if (Config_Ptr->mode == CTC_OCR1A) {
    12e8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ea:	fa 81       	ldd	r31, Y+2	; 0x02
    12ec:	85 81       	ldd	r24, Z+5	; 0x05
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	51 f4       	brne	.+20     	; 0x1306 <Timer1_init+0x3e>
		OCR1A = Config_Ptr->compare_value;
    12f2:	ea e4       	ldi	r30, 0x4A	; 74
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	a9 81       	ldd	r26, Y+1	; 0x01
    12f8:	ba 81       	ldd	r27, Y+2	; 0x02
    12fa:	12 96       	adiw	r26, 0x02	; 2
    12fc:	8d 91       	ld	r24, X+
    12fe:	9c 91       	ld	r25, X
    1300:	13 97       	sbiw	r26, 0x03	; 3
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
	}
	TCCR1A = (1 << FOC1A) | (1 << FOC1B)|(Config_Ptr->mode&0x03);
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e9 81       	ldd	r30, Y+1	; 0x01
    130c:	fa 81       	ldd	r31, Y+2	; 0x02
    130e:	85 81       	ldd	r24, Z+5	; 0x05
    1310:	83 70       	andi	r24, 0x03	; 3
    1312:	8c 60       	ori	r24, 0x0C	; 12
    1314:	8c 93       	st	X, r24
	TCCR1B = ((Config_Ptr->mode >> 2) << WGM12);
    1316:	ae e4       	ldi	r26, 0x4E	; 78
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e9 81       	ldd	r30, Y+1	; 0x01
    131c:	fa 81       	ldd	r31, Y+2	; 0x02
    131e:	85 81       	ldd	r24, Z+5	; 0x05
    1320:	86 95       	lsr	r24
    1322:	86 95       	lsr	r24
    1324:	88 0f       	add	r24, r24
    1326:	88 0f       	add	r24, r24
    1328:	88 0f       	add	r24, r24
    132a:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8)|(Config_Ptr->prescaler & 0x07);
    132c:	ae e4       	ldi	r26, 0x4E	; 78
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ee e4       	ldi	r30, 0x4E	; 78
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	98 2f       	mov	r25, r24
    1338:	98 7f       	andi	r25, 0xF8	; 248
    133a:	e9 81       	ldd	r30, Y+1	; 0x01
    133c:	fa 81       	ldd	r31, Y+2	; 0x02
    133e:	84 81       	ldd	r24, Z+4	; 0x04
    1340:	87 70       	andi	r24, 0x07	; 7
    1342:	89 2b       	or	r24, r25
    1344:	8c 93       	st	X, r24
	if (Config_Ptr->mode == CTC_OCR1A) {
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	85 81       	ldd	r24, Z+5	; 0x05
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	39 f4       	brne	.+14     	; 0x135e <Timer1_init+0x96>
		TIMSK |= (1 << OCIE1A);
    1350:	a9 e5       	ldi	r26, 0x59	; 89
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e9 e5       	ldi	r30, 0x59	; 89
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	80 61       	ori	r24, 0x10	; 16
    135c:	8c 93       	st	X, r24
	}
	if (Config_Ptr->mode == NORMAL_MODE) {
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	85 81       	ldd	r24, Z+5	; 0x05
    1364:	88 23       	and	r24, r24
    1366:	39 f4       	brne	.+14     	; 0x1376 <Timer1_init+0xae>
		TIMSK |= (1 << TOIE1);
    1368:	a9 e5       	ldi	r26, 0x59	; 89
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e9 e5       	ldi	r30, 0x59	; 89
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	84 60       	ori	r24, 0x04	; 4
    1374:	8c 93       	st	X, r24
	}
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <Timer1_deInit>:

void Timer1_deInit(void) {
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1388:	ef e4       	ldi	r30, 0x4F	; 79
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	10 82       	st	Z, r1
	TCCR1B = 0;
    138e:	ee e4       	ldi	r30, 0x4E	; 78
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	10 82       	st	Z, r1
}
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void)) {
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <Timer1_setCallBack+0x6>
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
	timer1_callBackPtr = a_ptr;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	90 93 7b 00 	sts	0x007B, r25
    13b0:	80 93 7a 00 	sts	0x007A, r24
}
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <TWI_init>:
#include "../utilities/common_macros.h"
#include <avr/io.h>


void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <TWI_init+0x6>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9b 83       	std	Y+3, r25	; 0x03
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint8 bitRate= ((FCPU/Config_Ptr->bit_rate)-16)/2;
    13ce:	ea 81       	ldd	r30, Y+2	; 0x02
    13d0:	fb 81       	ldd	r31, Y+3	; 0x03
    13d2:	21 81       	ldd	r18, Z+1	; 0x01
    13d4:	32 81       	ldd	r19, Z+2	; 0x02
    13d6:	43 81       	ldd	r20, Z+3	; 0x03
    13d8:	54 81       	ldd	r21, Z+4	; 0x04
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	92 e1       	ldi	r25, 0x12	; 18
    13de:	aa e7       	ldi	r26, 0x7A	; 122
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	bc 01       	movw	r22, r24
    13e4:	cd 01       	movw	r24, r26
    13e6:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    13ea:	da 01       	movw	r26, r20
    13ec:	c9 01       	movw	r24, r18
    13ee:	40 97       	sbiw	r24, 0x10	; 16
    13f0:	a1 09       	sbc	r26, r1
    13f2:	b1 09       	sbc	r27, r1
    13f4:	b6 95       	lsr	r27
    13f6:	a7 95       	ror	r26
    13f8:	97 95       	ror	r25
    13fa:	87 95       	ror	r24
    13fc:	89 83       	std	Y+1, r24	; 0x01
	if(bitRate<0){
		bitRate=((FCPU/NORMAL_MODE_100Kb)-16)/2;
	}
    TWBR = bitRate;
    13fe:	e0 e2       	ldi	r30, 0x20	; 32
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	80 83       	st	Z, r24
	TWSR = 0x00;
    1406:	e1 e2       	ldi	r30, 0x21	; 33
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address & 0xFE);
    140c:	a2 e2       	ldi	r26, 0x22	; 34
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea 81       	ldd	r30, Y+2	; 0x02
    1412:	fb 81       	ldd	r31, Y+3	; 0x03
    1414:	80 81       	ld	r24, Z
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    141a:	e6 e5       	ldi	r30, 0x56	; 86
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	84 e0       	ldi	r24, 0x04	; 4
    1420:	80 83       	st	Z, r24
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <TWI_start>:

void TWI_start(void)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1436:	e6 e5       	ldi	r30, 0x56	; 86
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	84 ea       	ldi	r24, 0xA4	; 164
    143c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    143e:	e6 e5       	ldi	r30, 0x56	; 86
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	88 23       	and	r24, r24
    1446:	dc f7       	brge	.-10     	; 0x143e <TWI_start+0x10>
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <TWI_stop>:

void TWI_stop(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1456:	e6 e5       	ldi	r30, 0x56	; 86
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	84 e9       	ldi	r24, 0x94	; 148
    145c:	80 83       	st	Z, r24
}
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1470:	e3 e2       	ldi	r30, 0x23	; 35
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1478:	e6 e5       	ldi	r30, 0x56	; 86
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	84 e8       	ldi	r24, 0x84	; 132
    147e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1480:	e6 e5       	ldi	r30, 0x56	; 86
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 23       	and	r24, r24
    1488:	dc f7       	brge	.-10     	; 0x1480 <TWI_writeByte+0x1c>
}
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    149a:	e6 e5       	ldi	r30, 0x56	; 86
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	84 ec       	ldi	r24, 0xC4	; 196
    14a0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14a2:	e6 e5       	ldi	r30, 0x56	; 86
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	dc f7       	brge	.-10     	; 0x14a2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    14ac:	e3 e2       	ldi	r30, 0x23	; 35
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    14c0:	e6 e5       	ldi	r30, 0x56	; 86
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	84 e8       	ldi	r24, 0x84	; 132
    14c6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    14c8:	e6 e5       	ldi	r30, 0x56	; 86
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	dc f7       	brge	.-10     	; 0x14c8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    14d2:	e3 e2       	ldi	r30, 0x23	; 35
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
}
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    14e8:	e1 e2       	ldi	r30, 0x21	; 33
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	88 7f       	andi	r24, 0xF8	; 248
    14f0:	89 83       	std	Y+1, r24	; 0x01
    return status;
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <UART_init+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <UART_init+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    150c:	1a 82       	std	Y+2, r1	; 0x02
    150e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1510:	eb e2       	ldi	r30, 0x2B	; 43
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1518:	ea e2       	ldi	r30, 0x2A	; 42
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	88 e1       	ldi	r24, 0x18	; 24
    151e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL)|(Config_Ptr->parity<<UPM0)|(Config_Ptr->stop_bit<<USBS) | ((Config_Ptr->bit_data&0x3)<<UCSZ0);
    1520:	a0 e4       	ldi	r26, 0x40	; 64
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb 81       	ldd	r30, Y+3	; 0x03
    1526:	fc 81       	ldd	r31, Y+4	; 0x04
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	82 95       	swap	r24
    1530:	92 95       	swap	r25
    1532:	90 7f       	andi	r25, 0xF0	; 240
    1534:	98 27       	eor	r25, r24
    1536:	80 7f       	andi	r24, 0xF0	; 240
    1538:	98 27       	eor	r25, r24
    153a:	28 2f       	mov	r18, r24
    153c:	20 68       	ori	r18, 0x80	; 128
    153e:	eb 81       	ldd	r30, Y+3	; 0x03
    1540:	fc 81       	ldd	r31, Y+4	; 0x04
    1542:	82 81       	ldd	r24, Z+2	; 0x02
    1544:	88 2f       	mov	r24, r24
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	28 2b       	or	r18, r24
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 81       	ld	r24, Z
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	83 70       	andi	r24, 0x03	; 3
    1562:	90 70       	andi	r25, 0x00	; 0
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 2b       	or	r24, r18
    156a:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    156c:	eb 81       	ldd	r30, Y+3	; 0x03
    156e:	fc 81       	ldd	r31, Y+4	; 0x04
    1570:	83 81       	ldd	r24, Z+3	; 0x03
    1572:	94 81       	ldd	r25, Z+4	; 0x04
    1574:	a5 81       	ldd	r26, Z+5	; 0x05
    1576:	b6 81       	ldd	r27, Z+6	; 0x06
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	aa 1f       	adc	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	aa 1f       	adc	r26, r26
    1586:	bb 1f       	adc	r27, r27
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	aa 1f       	adc	r26, r26
    158e:	bb 1f       	adc	r27, r27
    1590:	9c 01       	movw	r18, r24
    1592:	ad 01       	movw	r20, r26
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	92 e1       	ldi	r25, 0x12	; 18
    1598:	aa e7       	ldi	r26, 0x7A	; 122
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 99 11 	call	0x2332	; 0x2332 <__udivmodsi4>
    15a4:	da 01       	movw	r26, r20
    15a6:	c9 01       	movw	r24, r18
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    15ae:	e0 e4       	ldi	r30, 0x40	; 64
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	89 2f       	mov	r24, r25
    15b8:	99 27       	eor	r25, r25
    15ba:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    15bc:	e9 e2       	ldi	r30, 0x29	; 41
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	80 83       	st	Z, r24
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    15de:	eb e2       	ldi	r30, 0x2B	; 43
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	80 72       	andi	r24, 0x20	; 32
    15ea:	90 70       	andi	r25, 0x00	; 0
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	b9 f3       	breq	.-18     	; 0x15de <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    15f0:	ec e2       	ldi	r30, 0x2C	; 44
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1608:	eb e2       	ldi	r30, 0x2B	; 43
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	88 23       	and	r24, r24
    1610:	dc f7       	brge	.-10     	; 0x1608 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1612:	ec e2       	ldi	r30, 0x2C	; 44
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <UART_sendString+0x6>
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	0e c0       	rjmp	.+28     	; 0x164e <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	fc 01       	movw	r30, r24
    163e:	e2 0f       	add	r30, r18
    1640:	f3 1f       	adc	r31, r19
    1642:	80 81       	ld	r24, Z
    1644:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
		i++;
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	8f 5f       	subi	r24, 0xFF	; 255
    164c:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	fc 01       	movw	r30, r24
    165a:	e2 0f       	add	r30, r18
    165c:	f3 1f       	adc	r31, r19
    165e:	80 81       	ld	r24, Z
    1660:	88 23       	and	r24, r24
    1662:	39 f7       	brne	.-50     	; 0x1632 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <UART_receiveString+0xa>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	9b 83       	std	Y+3, r25	; 0x03
    1682:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1684:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	9b 81       	ldd	r25, Y+3	; 0x03
    1690:	8c 01       	movw	r16, r24
    1692:	02 0f       	add	r16, r18
    1694:	13 1f       	adc	r17, r19
    1696:	0e 94 00 0b 	call	0x1600	; 0x1600 <UART_recieveByte>
    169a:	f8 01       	movw	r30, r16
    169c:	80 83       	st	Z, r24
    169e:	0f c0       	rjmp	.+30     	; 0x16be <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	8f 5f       	subi	r24, 0xFF	; 255
    16a4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	9b 81       	ldd	r25, Y+3	; 0x03
    16b0:	8c 01       	movw	r16, r24
    16b2:	02 0f       	add	r16, r18
    16b4:	13 1f       	adc	r17, r19
    16b6:	0e 94 00 0b 	call	0x1600	; 0x1600 <UART_recieveByte>
    16ba:	f8 01       	movw	r30, r16
    16bc:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	9b 81       	ldd	r25, Y+3	; 0x03
    16c8:	fc 01       	movw	r30, r24
    16ca:	e2 0f       	add	r30, r18
    16cc:	f3 1f       	adc	r31, r19
    16ce:	80 81       	ld	r24, Z
    16d0:	83 32       	cpi	r24, 0x23	; 35
    16d2:	31 f7       	brne	.-52     	; 0x16a0 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	fc 01       	movw	r30, r24
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	10 82       	st	Z, r1
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <Buzzer_init>:
 */

#include"buzzer.h"
#include"../MCAL/gpio.h"

void Buzzer_init(void){
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <Buzzer_on>:
void Buzzer_on(void){
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	60 e0       	ldi	r22, 0x00	; 0
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <Buzzer_off>:
void Buzzer_off(void){
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <DcMotor_init>:
#include"dcmotor.h"
#include"../MCAL/pwm.h"



void DcMotor_init(void){
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_INPUT1_PORT_ID,DC_INPUT1_PIN_ID,PIN_OUTPUT);
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	41 e0       	ldi	r20, 0x01	; 1
    1756:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_INPUT2_PORT_ID,DC_INPUT2_PIN_ID,PIN_OUTPUT);
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	61 e0       	ldi	r22, 0x01	; 1
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_writePin(DC_INPUT1_PORT_ID,DC_INPUT1_PIN_ID,LOGIC_LOW);
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DC_INPUT2_PORT_ID,DC_INPUT2_PIN_ID,LOGIC_LOW);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	00 d0       	rcall	.+0      	; 0x1784 <DcMotor_Rotate+0x6>
    1784:	00 d0       	rcall	.+0      	; 0x1786 <DcMotor_Rotate+0x8>
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3c 83       	std	Y+4, r19	; 0x04
    1796:	2b 83       	std	Y+3, r18	; 0x03
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	91 05       	cpc	r25, r1
    17a0:	a1 f0       	breq	.+40     	; 0x17ca <DcMotor_Rotate+0x4c>
    17a2:	2b 81       	ldd	r18, Y+3	; 0x03
    17a4:	3c 81       	ldd	r19, Y+4	; 0x04
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	d1 f0       	breq	.+52     	; 0x17e0 <DcMotor_Rotate+0x62>
    17ac:	8b 81       	ldd	r24, Y+3	; 0x03
    17ae:	9c 81       	ldd	r25, Y+4	; 0x04
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	01 f5       	brne	.+64     	; 0x17f4 <DcMotor_Rotate+0x76>
	case CW:
		GPIO_writePin(DC_INPUT1_PORT_ID,DC_INPUT1_PIN_ID,LOGIC_HIGH);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_INPUT2_PORT_ID,DC_INPUT2_PIN_ID,LOGIC_LOW);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17c8:	15 c0       	rjmp	.+42     	; 0x17f4 <DcMotor_Rotate+0x76>
		break;
	case ACW:
		GPIO_writePin(DC_INPUT1_PORT_ID,DC_INPUT1_PIN_ID,LOGIC_LOW);
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_INPUT2_PORT_ID,DC_INPUT2_PIN_ID,LOGIC_HIGH);
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17de:	0a c0       	rjmp	.+20     	; 0x17f4 <DcMotor_Rotate+0x76>
		break;
	case STOP:
		GPIO_writePin(DC_INPUT1_PORT_ID,DC_INPUT1_PIN_ID,LOGIC_LOW);
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	60 e0       	ldi	r22, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_INPUT2_PORT_ID,DC_INPUT2_PIN_ID,LOGIC_LOW);
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <PWM_Timer0_Start>
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../MCAL/twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <EEPROM_writeByte+0x6>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <EEPROM_writeByte+0x8>
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    181a:	0e 94 17 0a 	call	0x142e	; 0x142e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    181e:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    1822:	88 30       	cpi	r24, 0x08	; 8
    1824:	11 f0       	breq	.+4      	; 0x182a <EEPROM_writeByte+0x22>
        return ERROR;
    1826:	1c 82       	std	Y+4, r1	; 0x04
    1828:	28 c0       	rjmp	.+80     	; 0x187a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	80 70       	andi	r24, 0x00	; 0
    1830:	97 70       	andi	r25, 0x07	; 7
    1832:	88 0f       	add	r24, r24
    1834:	89 2f       	mov	r24, r25
    1836:	88 1f       	adc	r24, r24
    1838:	99 0b       	sbc	r25, r25
    183a:	91 95       	neg	r25
    183c:	80 6a       	ori	r24, 0xA0	; 160
    183e:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1842:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    1846:	88 31       	cpi	r24, 0x18	; 24
    1848:	11 f0       	breq	.+4      	; 0x184e <EEPROM_writeByte+0x46>
        return ERROR; 
    184a:	1c 82       	std	Y+4, r1	; 0x04
    184c:	16 c0       	rjmp	.+44     	; 0x187a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1854:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    1858:	88 32       	cpi	r24, 0x28	; 40
    185a:	11 f0       	breq	.+4      	; 0x1860 <EEPROM_writeByte+0x58>
        return ERROR;
    185c:	1c 82       	std	Y+4, r1	; 0x04
    185e:	0d c0       	rjmp	.+26     	; 0x187a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1866:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    186a:	88 32       	cpi	r24, 0x28	; 40
    186c:	11 f0       	breq	.+4      	; 0x1872 <EEPROM_writeByte+0x6a>
        return ERROR;
    186e:	1c 82       	std	Y+4, r1	; 0x04
    1870:	04 c0       	rjmp	.+8      	; 0x187a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1872:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_stop>
	
    return SUCCESS;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8c 83       	std	Y+4, r24	; 0x04
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <EEPROM_readByte+0x6>
    1890:	00 d0       	rcall	.+0      	; 0x1892 <EEPROM_readByte+0x8>
    1892:	0f 92       	push	r0
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	7c 83       	std	Y+4, r23	; 0x04
    189e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18a0:	0e 94 17 0a 	call	0x142e	; 0x142e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    18a4:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    18a8:	88 30       	cpi	r24, 0x08	; 8
    18aa:	11 f0       	breq	.+4      	; 0x18b0 <EEPROM_readByte+0x26>
        return ERROR;
    18ac:	1d 82       	std	Y+5, r1	; 0x05
    18ae:	44 c0       	rjmp	.+136    	; 0x1938 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	80 70       	andi	r24, 0x00	; 0
    18b6:	97 70       	andi	r25, 0x07	; 7
    18b8:	88 0f       	add	r24, r24
    18ba:	89 2f       	mov	r24, r25
    18bc:	88 1f       	adc	r24, r24
    18be:	99 0b       	sbc	r25, r25
    18c0:	91 95       	neg	r25
    18c2:	80 6a       	ori	r24, 0xA0	; 160
    18c4:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    18c8:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    18cc:	88 31       	cpi	r24, 0x18	; 24
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <EEPROM_readByte+0x4a>
        return ERROR;
    18d0:	1d 82       	std	Y+5, r1	; 0x05
    18d2:	32 c0       	rjmp	.+100    	; 0x1938 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    18da:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    18de:	88 32       	cpi	r24, 0x28	; 40
    18e0:	11 f0       	breq	.+4      	; 0x18e6 <EEPROM_readByte+0x5c>
        return ERROR;
    18e2:	1d 82       	std	Y+5, r1	; 0x05
    18e4:	29 c0       	rjmp	.+82     	; 0x1938 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    18e6:	0e 94 17 0a 	call	0x142e	; 0x142e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    18ea:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    18ee:	80 31       	cpi	r24, 0x10	; 16
    18f0:	11 f0       	breq	.+4      	; 0x18f6 <EEPROM_readByte+0x6c>
        return ERROR;
    18f2:	1d 82       	std	Y+5, r1	; 0x05
    18f4:	21 c0       	rjmp	.+66     	; 0x1938 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	80 70       	andi	r24, 0x00	; 0
    18fc:	97 70       	andi	r25, 0x07	; 7
    18fe:	88 0f       	add	r24, r24
    1900:	89 2f       	mov	r24, r25
    1902:	88 1f       	adc	r24, r24
    1904:	99 0b       	sbc	r25, r25
    1906:	91 95       	neg	r25
    1908:	81 6a       	ori	r24, 0xA1	; 161
    190a:	0e 94 32 0a 	call	0x1464	; 0x1464 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    190e:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    1912:	80 34       	cpi	r24, 0x40	; 64
    1914:	11 f0       	breq	.+4      	; 0x191a <EEPROM_readByte+0x90>
        return ERROR;
    1916:	1d 82       	std	Y+5, r1	; 0x05
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    191a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <TWI_readByteWithNACK>
    191e:	eb 81       	ldd	r30, Y+3	; 0x03
    1920:	fc 81       	ldd	r31, Y+4	; 0x04
    1922:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1924:	0e 94 6f 0a 	call	0x14de	; 0x14de <TWI_getStatus>
    1928:	88 35       	cpi	r24, 0x58	; 88
    192a:	11 f0       	breq	.+4      	; 0x1930 <EEPROM_readByte+0xa6>
        return ERROR;
    192c:	1d 82       	std	Y+5, r1	; 0x05
    192e:	04 c0       	rjmp	.+8      	; 0x1938 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1930:	0e 94 27 0a 	call	0x144e	; 0x144e <TWI_stop>

    return SUCCESS;
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <timer1>:
#define NOT_SETTED 				'c'


uint8 g_timerticks=0;

void timer1(void){
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
	g_timerticks++;
    1952:	80 91 7c 00 	lds	r24, 0x007C
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	80 93 7c 00 	sts	0x007C, r24
}
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <receivePass>:
void receivePass(uint8 *PasswordArr){
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <receivePass+0xa>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i = 0 ; i < PASSWORD_LENGTH ; i++){
    1976:	19 82       	std	Y+1, r1	; 0x01
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <receivePass+0x36>
		PasswordArr[i] = UART_recieveByte();
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	28 2f       	mov	r18, r24
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	8c 01       	movw	r16, r24
    1986:	02 0f       	add	r16, r18
    1988:	13 1f       	adc	r17, r19
    198a:	0e 94 00 0b 	call	0x1600	; 0x1600 <UART_recieveByte>
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24

void timer1(void){
	g_timerticks++;
}
void receivePass(uint8 *PasswordArr){
	for(uint8 i = 0 ; i < PASSWORD_LENGTH ; i++){
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	8f 5f       	subi	r24, 0xFF	; 255
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	85 30       	cpi	r24, 0x05	; 5
    199c:	70 f3       	brcs	.-36     	; 0x197a <receivePass+0x18>
		PasswordArr[i] = UART_recieveByte();
	}
}
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <main>:
int main(void) {
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	ca 57       	subi	r28, 0x7A	; 122
    19bc:	d0 40       	sbci	r29, 0x00	; 0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);
    19c8:	af e5       	ldi	r26, 0x5F	; 95
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	ef e5       	ldi	r30, 0x5F	; 95
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	80 68       	ori	r24, 0x80	; 128
    19d4:	8c 93       	st	X, r24
	uint8 password[PASSWORD_LENGTH],confirmPass[PASSWORD_LENGTH];
	uint8 isPassSet=0;
    19d6:	fe 01       	movw	r30, r28
    19d8:	ea 5a       	subi	r30, 0xAA	; 170
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	10 82       	st	Z, r1
	uint8 isPassMatched=0;
    19de:	fe 01       	movw	r30, r28
    19e0:	e5 5b       	subi	r30, 0xB5	; 181
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	10 82       	st	Z, r1

	UART_ConfigType UART_Config = {_8_BIT , PARITY_DISABLED , STOP_1_BIT , 9600};
    19e6:	ce 01       	movw	r24, r28
    19e8:	89 5a       	subi	r24, 0xA9	; 169
    19ea:	9f 4f       	sbci	r25, 0xFF	; 255
    19ec:	ae 96       	adiw	r28, 0x2e	; 46
    19ee:	9f af       	std	Y+63, r25	; 0x3f
    19f0:	8e af       	std	Y+62, r24	; 0x3e
    19f2:	ae 97       	sbiw	r28, 0x2e	; 46
    19f4:	23 e7       	ldi	r18, 0x73	; 115
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	e0 96       	adiw	r28, 0x30	; 48
    19fa:	3f af       	std	Y+63, r19	; 0x3f
    19fc:	2e af       	std	Y+62, r18	; 0x3e
    19fe:	e0 97       	sbiw	r28, 0x30	; 48
    1a00:	37 e0       	ldi	r19, 0x07	; 7
    1a02:	e1 96       	adiw	r28, 0x31	; 49
    1a04:	3f af       	std	Y+63, r19	; 0x3f
    1a06:	e1 97       	sbiw	r28, 0x31	; 49
    1a08:	e0 96       	adiw	r28, 0x30	; 48
    1a0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a0e:	e0 97       	sbiw	r28, 0x30	; 48
    1a10:	00 80       	ld	r0, Z
    1a12:	e0 96       	adiw	r28, 0x30	; 48
    1a14:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a16:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a18:	e0 97       	sbiw	r28, 0x30	; 48
    1a1a:	2f 5f       	subi	r18, 0xFF	; 255
    1a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1e:	e0 96       	adiw	r28, 0x30	; 48
    1a20:	3f af       	std	Y+63, r19	; 0x3f
    1a22:	2e af       	std	Y+62, r18	; 0x3e
    1a24:	e0 97       	sbiw	r28, 0x30	; 48
    1a26:	ae 96       	adiw	r28, 0x2e	; 46
    1a28:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a2a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a2c:	ae 97       	sbiw	r28, 0x2e	; 46
    1a2e:	00 82       	st	Z, r0
    1a30:	ae 96       	adiw	r28, 0x2e	; 46
    1a32:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a34:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a36:	ae 97       	sbiw	r28, 0x2e	; 46
    1a38:	2f 5f       	subi	r18, 0xFF	; 255
    1a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3c:	ae 96       	adiw	r28, 0x2e	; 46
    1a3e:	3f af       	std	Y+63, r19	; 0x3f
    1a40:	2e af       	std	Y+62, r18	; 0x3e
    1a42:	ae 97       	sbiw	r28, 0x2e	; 46
    1a44:	e1 96       	adiw	r28, 0x31	; 49
    1a46:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a48:	e1 97       	sbiw	r28, 0x31	; 49
    1a4a:	31 50       	subi	r19, 0x01	; 1
    1a4c:	e1 96       	adiw	r28, 0x31	; 49
    1a4e:	3f af       	std	Y+63, r19	; 0x3f
    1a50:	e1 97       	sbiw	r28, 0x31	; 49
    1a52:	e1 96       	adiw	r28, 0x31	; 49
    1a54:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a56:	e1 97       	sbiw	r28, 0x31	; 49
    1a58:	88 23       	and	r24, r24
    1a5a:	b1 f6       	brne	.-84     	; 0x1a08 <main+0x5a>
	TWI_ConfigType	I2C_Config = {0x01 , NORMAL_MODE_100Kb};
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	82 5a       	subi	r24, 0xA2	; 162
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	e3 96       	adiw	r28, 0x33	; 51
    1a64:	9f af       	std	Y+63, r25	; 0x3f
    1a66:	8e af       	std	Y+62, r24	; 0x3e
    1a68:	e3 97       	sbiw	r28, 0x33	; 51
    1a6a:	ee e6       	ldi	r30, 0x6E	; 110
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	e5 96       	adiw	r28, 0x35	; 53
    1a70:	ff af       	std	Y+63, r31	; 0x3f
    1a72:	ee af       	std	Y+62, r30	; 0x3e
    1a74:	e5 97       	sbiw	r28, 0x35	; 53
    1a76:	f5 e0       	ldi	r31, 0x05	; 5
    1a78:	e6 96       	adiw	r28, 0x36	; 54
    1a7a:	ff af       	std	Y+63, r31	; 0x3f
    1a7c:	e6 97       	sbiw	r28, 0x36	; 54
    1a7e:	e5 96       	adiw	r28, 0x35	; 53
    1a80:	ee ad       	ldd	r30, Y+62	; 0x3e
    1a82:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a84:	e5 97       	sbiw	r28, 0x35	; 53
    1a86:	00 80       	ld	r0, Z
    1a88:	e5 96       	adiw	r28, 0x35	; 53
    1a8a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1a8c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a8e:	e5 97       	sbiw	r28, 0x35	; 53
    1a90:	2f 5f       	subi	r18, 0xFF	; 255
    1a92:	3f 4f       	sbci	r19, 0xFF	; 255
    1a94:	e5 96       	adiw	r28, 0x35	; 53
    1a96:	3f af       	std	Y+63, r19	; 0x3f
    1a98:	2e af       	std	Y+62, r18	; 0x3e
    1a9a:	e5 97       	sbiw	r28, 0x35	; 53
    1a9c:	e3 96       	adiw	r28, 0x33	; 51
    1a9e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1aa0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1aa2:	e3 97       	sbiw	r28, 0x33	; 51
    1aa4:	00 82       	st	Z, r0
    1aa6:	e3 96       	adiw	r28, 0x33	; 51
    1aa8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1aaa:	3f ad       	ldd	r19, Y+63	; 0x3f
    1aac:	e3 97       	sbiw	r28, 0x33	; 51
    1aae:	2f 5f       	subi	r18, 0xFF	; 255
    1ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab2:	e3 96       	adiw	r28, 0x33	; 51
    1ab4:	3f af       	std	Y+63, r19	; 0x3f
    1ab6:	2e af       	std	Y+62, r18	; 0x3e
    1ab8:	e3 97       	sbiw	r28, 0x33	; 51
    1aba:	e6 96       	adiw	r28, 0x36	; 54
    1abc:	3f ad       	ldd	r19, Y+63	; 0x3f
    1abe:	e6 97       	sbiw	r28, 0x36	; 54
    1ac0:	31 50       	subi	r19, 0x01	; 1
    1ac2:	e6 96       	adiw	r28, 0x36	; 54
    1ac4:	3f af       	std	Y+63, r19	; 0x3f
    1ac6:	e6 97       	sbiw	r28, 0x36	; 54
    1ac8:	e6 96       	adiw	r28, 0x36	; 54
    1aca:	8f ad       	ldd	r24, Y+63	; 0x3f
    1acc:	e6 97       	sbiw	r28, 0x36	; 54
    1ace:	88 23       	and	r24, r24
    1ad0:	b1 f6       	brne	.-84     	; 0x1a7e <main+0xd0>
	Timer1_ConfigType Timer1_Config = {0 , 31250 , CTC_OCR1A , FCPU_256};
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	8d 59       	subi	r24, 0x9D	; 157
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	e8 96       	adiw	r28, 0x38	; 56
    1ada:	9f af       	std	Y+63, r25	; 0x3f
    1adc:	8e af       	std	Y+62, r24	; 0x3e
    1ade:	e8 97       	sbiw	r28, 0x38	; 56
    1ae0:	e8 e6       	ldi	r30, 0x68	; 104
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	ea 96       	adiw	r28, 0x3a	; 58
    1ae6:	ff af       	std	Y+63, r31	; 0x3f
    1ae8:	ee af       	std	Y+62, r30	; 0x3e
    1aea:	ea 97       	sbiw	r28, 0x3a	; 58
    1aec:	f6 e0       	ldi	r31, 0x06	; 6
    1aee:	eb 96       	adiw	r28, 0x3b	; 59
    1af0:	ff af       	std	Y+63, r31	; 0x3f
    1af2:	eb 97       	sbiw	r28, 0x3b	; 59
    1af4:	ea 96       	adiw	r28, 0x3a	; 58
    1af6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1af8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1afa:	ea 97       	sbiw	r28, 0x3a	; 58
    1afc:	00 80       	ld	r0, Z
    1afe:	ea 96       	adiw	r28, 0x3a	; 58
    1b00:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b02:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b04:	ea 97       	sbiw	r28, 0x3a	; 58
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	ea 96       	adiw	r28, 0x3a	; 58
    1b0c:	3f af       	std	Y+63, r19	; 0x3f
    1b0e:	2e af       	std	Y+62, r18	; 0x3e
    1b10:	ea 97       	sbiw	r28, 0x3a	; 58
    1b12:	e8 96       	adiw	r28, 0x38	; 56
    1b14:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b18:	e8 97       	sbiw	r28, 0x38	; 56
    1b1a:	00 82       	st	Z, r0
    1b1c:	e8 96       	adiw	r28, 0x38	; 56
    1b1e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b20:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b22:	e8 97       	sbiw	r28, 0x38	; 56
    1b24:	2f 5f       	subi	r18, 0xFF	; 255
    1b26:	3f 4f       	sbci	r19, 0xFF	; 255
    1b28:	e8 96       	adiw	r28, 0x38	; 56
    1b2a:	3f af       	std	Y+63, r19	; 0x3f
    1b2c:	2e af       	std	Y+62, r18	; 0x3e
    1b2e:	e8 97       	sbiw	r28, 0x38	; 56
    1b30:	eb 96       	adiw	r28, 0x3b	; 59
    1b32:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b34:	eb 97       	sbiw	r28, 0x3b	; 59
    1b36:	31 50       	subi	r19, 0x01	; 1
    1b38:	eb 96       	adiw	r28, 0x3b	; 59
    1b3a:	3f af       	std	Y+63, r19	; 0x3f
    1b3c:	eb 97       	sbiw	r28, 0x3b	; 59
    1b3e:	eb 96       	adiw	r28, 0x3b	; 59
    1b40:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b42:	eb 97       	sbiw	r28, 0x3b	; 59
    1b44:	88 23       	and	r24, r24
    1b46:	b1 f6       	brne	.-84     	; 0x1af4 <main+0x146>
	Timer1_setCallBack(timer1);
    1b48:	85 ea       	ldi	r24, 0xA5	; 165
    1b4a:	9c e0       	ldi	r25, 0x0C	; 12
    1b4c:	0e 94 cd 09 	call	0x139a	; 0x139a <Timer1_setCallBack>
	UART_init(&UART_Config);
    1b50:	ce 01       	movw	r24, r28
    1b52:	89 5a       	subi	r24, 0xA9	; 169
    1b54:	9f 4f       	sbci	r25, 0xFF	; 255
    1b56:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <UART_init>
	TWI_init(&I2C_Config);
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	82 5a       	subi	r24, 0xA2	; 162
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	0e 94 df 09 	call	0x13be	; 0x13be <TWI_init>
	Buzzer_init();
    1b64:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <Buzzer_init>
	DcMotor_init();
    1b68:	0e 94 a4 0b 	call	0x1748	; 0x1748 <DcMotor_init>
	EEPROM_writeByte(0x0F , isPassSet);
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ea 5a       	subi	r30, 0xAA	; 170
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	20 81       	ld	r18, Z
    1b74:	8f e0       	ldi	r24, 0x0F	; 15
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	62 2f       	mov	r22, r18
    1b7a:	0e 94 04 0c 	call	0x1808	; 0x1808 <EEPROM_writeByte>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ed 5b       	subi	r30, 0xBD	; 189
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a0 e7       	ldi	r26, 0x70	; 112
    1b8a:	b1 e4       	ldi	r27, 0x41	; 65
    1b8c:	80 83       	st	Z, r24
    1b8e:	91 83       	std	Z+1, r25	; 0x01
    1b90:	a2 83       	std	Z+2, r26	; 0x02
    1b92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b94:	8e 01       	movw	r16, r28
    1b96:	01 5c       	subi	r16, 0xC1	; 193
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ed 5b       	subi	r30, 0xBD	; 189
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	82 81       	ldd	r24, Z+2	; 0x02
    1ba6:	93 81       	ldd	r25, Z+3	; 0x03
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a ef       	ldi	r20, 0xFA	; 250
    1bae:	54 e4       	ldi	r21, 0x44	; 68
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	f8 01       	movw	r30, r16
    1bba:	80 83       	st	Z, r24
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	a2 83       	std	Z+2, r26	; 0x02
    1bc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ff 96       	adiw	r30, 0x3f	; 63
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <main+0x23a>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e af       	std	Y+62, r25	; 0x3e
    1be4:	8d af       	std	Y+61, r24	; 0x3d
    1be6:	46 c0       	rjmp	.+140    	; 0x1c74 <main+0x2c6>
	else if (__tmp > 65535)
    1be8:	fe 01       	movw	r30, r28
    1bea:	ff 96       	adiw	r30, 0x3f	; 63
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	3f ef       	ldi	r19, 0xFF	; 255
    1bf8:	4f e7       	ldi	r20, 0x7F	; 127
    1bfa:	57 e4       	ldi	r21, 0x47	; 71
    1bfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c00:	18 16       	cp	r1, r24
    1c02:	64 f5       	brge	.+88     	; 0x1c5c <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c04:	fe 01       	movw	r30, r28
    1c06:	ed 5b       	subi	r30, 0xBD	; 189
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e2       	ldi	r20, 0x20	; 32
    1c18:	51 e4       	ldi	r21, 0x41	; 65
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	bc 01       	movw	r22, r24
    1c24:	cd 01       	movw	r24, r26
    1c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	9e af       	std	Y+62, r25	; 0x3e
    1c30:	8d af       	std	Y+61, r24	; 0x3d
    1c32:	0f c0       	rjmp	.+30     	; 0x1c52 <main+0x2a4>
    1c34:	88 ec       	ldi	r24, 0xC8	; 200
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c af       	std	Y+60, r25	; 0x3c
    1c3a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <main+0x292>
    1c44:	9c af       	std	Y+60, r25	; 0x3c
    1c46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	9e af       	std	Y+62, r25	; 0x3e
    1c50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	69 f7       	brne	.-38     	; 0x1c34 <main+0x286>
    1c5a:	16 c0       	rjmp	.+44     	; 0x1c88 <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ff 96       	adiw	r30, 0x3f	; 63
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e af       	std	Y+62, r25	; 0x3e
    1c72:	8d af       	std	Y+61, r24	; 0x3d
    1c74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c78:	9a af       	std	Y+58, r25	; 0x3a
    1c7a:	89 af       	std	Y+57, r24	; 0x39
    1c7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1c7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <main+0x2d2>
    1c84:	9a af       	std	Y+58, r25	; 0x3a
    1c86:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);
	while(1) {
		uint8 receivedByte = UART_recieveByte();
    1c88:	0e 94 00 0b 	call	0x1600	; 0x1600 <UART_recieveByte>
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e6 5b       	subi	r30, 0xB6	; 182
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 83       	st	Z, r24

		switch (receivedByte) {
    1c94:	fe 01       	movw	r30, r28
    1c96:	e6 5b       	subi	r30, 0xB6	; 182
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	ac 96       	adiw	r28, 0x2c	; 44
    1ca2:	3f af       	std	Y+63, r19	; 0x3f
    1ca4:	2e af       	std	Y+62, r18	; 0x3e
    1ca6:	ac 97       	sbiw	r28, 0x2c	; 44
    1ca8:	ac 96       	adiw	r28, 0x2c	; 44
    1caa:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cae:	ac 97       	sbiw	r28, 0x2c	; 44
    1cb0:	83 33       	cpi	r24, 0x33	; 51
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <main+0x30a>
    1cb6:	5e c0       	rjmp	.+188    	; 0x1d74 <main+0x3c6>
    1cb8:	ac 96       	adiw	r28, 0x2c	; 44
    1cba:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cbe:	ac 97       	sbiw	r28, 0x2c	; 44
    1cc0:	e4 33       	cpi	r30, 0x34	; 52
    1cc2:	f1 05       	cpc	r31, r1
    1cc4:	c4 f4       	brge	.+48     	; 0x1cf6 <main+0x348>
    1cc6:	ac 96       	adiw	r28, 0x2c	; 44
    1cc8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cca:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ccc:	ac 97       	sbiw	r28, 0x2c	; 44
    1cce:	21 33       	cpi	r18, 0x31	; 49
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <main+0x328>
    1cd4:	43 c0       	rjmp	.+134    	; 0x1d5c <main+0x3ae>
    1cd6:	ac 96       	adiw	r28, 0x2c	; 44
    1cd8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cda:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cdc:	ac 97       	sbiw	r28, 0x2c	; 44
    1cde:	82 33       	cpi	r24, 0x32	; 50
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	0c f0       	brlt	.+2      	; 0x1ce6 <main+0x338>
    1ce4:	41 c0       	rjmp	.+130    	; 0x1d68 <main+0x3ba>
    1ce6:	ac 96       	adiw	r28, 0x2c	; 44
    1ce8:	ee ad       	ldd	r30, Y+62	; 0x3e
    1cea:	ff ad       	ldd	r31, Y+63	; 0x3f
    1cec:	ac 97       	sbiw	r28, 0x2c	; 44
    1cee:	e0 33       	cpi	r30, 0x30	; 48
    1cf0:	f1 05       	cpc	r31, r1
    1cf2:	d1 f0       	breq	.+52     	; 0x1d28 <main+0x37a>
    1cf4:	c9 cf       	rjmp	.-110    	; 0x1c88 <main+0x2da>
    1cf6:	ac 96       	adiw	r28, 0x2c	; 44
    1cf8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cfa:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cfc:	ac 97       	sbiw	r28, 0x2c	; 44
    1cfe:	29 33       	cpi	r18, 0x39	; 57
    1d00:	31 05       	cpc	r19, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <main+0x358>
    1d04:	04 c3       	rjmp	.+1544   	; 0x230e <main+0x960>
    1d06:	ac 96       	adiw	r28, 0x2c	; 44
    1d08:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d0c:	ac 97       	sbiw	r28, 0x2c	; 44
    1d0e:	81 36       	cpi	r24, 0x61	; 97
    1d10:	91 05       	cpc	r25, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <main+0x368>
    1d14:	c4 c2       	rjmp	.+1416   	; 0x229e <main+0x8f0>
    1d16:	ac 96       	adiw	r28, 0x2c	; 44
    1d18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d1c:	ac 97       	sbiw	r28, 0x2c	; 44
    1d1e:	e6 33       	cpi	r30, 0x36	; 54
    1d20:	f1 05       	cpc	r31, r1
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <main+0x378>
    1d24:	fa c1       	rjmp	.+1012   	; 0x211a <main+0x76c>
    1d26:	b0 cf       	rjmp	.-160    	; 0x1c88 <main+0x2da>
		case IS_PASSWORD_SET:
			isPassSet = 0;
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ea 5a       	subi	r30, 0xAA	; 170
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	10 82       	st	Z, r1
			EEPROM_readByte(0x0F, &isPassSet);
    1d30:	9e 01       	movw	r18, r28
    1d32:	2a 5a       	subi	r18, 0xAA	; 170
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	8f e0       	ldi	r24, 0x0F	; 15
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	0e 94 45 0c 	call	0x188a	; 0x188a <EEPROM_readByte>
			if (isPassSet) {
    1d40:	fe 01       	movw	r30, r28
    1d42:	ea 5a       	subi	r30, 0xAA	; 170
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	88 23       	and	r24, r24
    1d4a:	21 f0       	breq	.+8      	; 0x1d54 <main+0x3a6>
				UART_sendByte(SETTED);
    1d4c:	82 e6       	ldi	r24, 0x62	; 98
    1d4e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
    1d52:	9a cf       	rjmp	.-204    	; 0x1c88 <main+0x2da>
			} else {
				UART_sendByte(NOT_SETTED);
    1d54:	83 e6       	ldi	r24, 0x63	; 99
    1d56:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
    1d5a:	96 cf       	rjmp	.-212    	; 0x1c88 <main+0x2da>
			}
			break;

		case SEND_FIRST_PASSWORD:
			receivePass(password);
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	84 5b       	subi	r24, 0xB4	; 180
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	0e 94 b1 0c 	call	0x1962	; 0x1962 <receivePass>
    1d66:	90 cf       	rjmp	.-224    	; 0x1c88 <main+0x2da>
			break;

		case SEND_SECOND_PASSWORD:
			receivePass(confirmPass);
    1d68:	ce 01       	movw	r24, r28
    1d6a:	8f 5a       	subi	r24, 0xAF	; 175
    1d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <receivePass>
    1d72:	8a cf       	rjmp	.-236    	; 0x1c88 <main+0x2da>
			break;

		case ARE_THEY_MATCHED:
			isPassMatched = 1;
    1d74:	fe 01       	movw	r30, r28
    1d76:	e5 5b       	subi	r30, 0xB5	; 181
    1d78:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 83       	st	Z, r24
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e7 5b       	subi	r30, 0xB7	; 183
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	10 82       	st	Z, r1
    1d86:	2a c0       	rjmp	.+84     	; 0x1ddc <main+0x42e>
				if (password[i] != confirmPass[i]) {
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e7 5b       	subi	r30, 0xB7	; 183
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	ce 01       	movw	r24, r28
    1d96:	84 5b       	subi	r24, 0xB4	; 180
    1d98:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e2 0f       	add	r30, r18
    1d9e:	f3 1f       	adc	r31, r19
    1da0:	40 81       	ld	r20, Z
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5b       	subi	r30, 0xB7	; 183
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	ce 01       	movw	r24, r28
    1db0:	8f 5a       	subi	r24, 0xAF	; 175
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	fc 01       	movw	r30, r24
    1db6:	e2 0f       	add	r30, r18
    1db8:	f3 1f       	adc	r31, r19
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 17       	cp	r20, r24
    1dbe:	29 f0       	breq	.+10     	; 0x1dca <main+0x41c>
					isPassMatched = 0;
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e5 5b       	subi	r30, 0xB5	; 181
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	10 82       	st	Z, r1
    1dc8:	0f c0       	rjmp	.+30     	; 0x1de8 <main+0x43a>
			receivePass(confirmPass);
			break;

		case ARE_THEY_MATCHED:
			isPassMatched = 1;
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1dca:	de 01       	movw	r26, r28
    1dcc:	a7 5b       	subi	r26, 0xB7	; 183
    1dce:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e7 5b       	subi	r30, 0xB7	; 183
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	8c 93       	st	X, r24
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e7 5b       	subi	r30, 0xB7	; 183
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	85 30       	cpi	r24, 0x05	; 5
    1de6:	80 f2       	brcs	.-96     	; 0x1d88 <main+0x3da>
					isPassMatched = 0;
					break;
				}
			}

			if (isPassMatched) {
    1de8:	fe 01       	movw	r30, r28
    1dea:	e5 5b       	subi	r30, 0xB5	; 181
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	88 23       	and	r24, r24
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <main+0x448>
    1df4:	1c c1       	rjmp	.+568    	; 0x202e <main+0x680>
				UART_sendByte(MATCHED);
    1df6:	84 e3       	ldi	r24, 0x34	; 52
    1df8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
				EEPROM_writeByte(0x0F, isPassMatched);
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e5 5b       	subi	r30, 0xB5	; 181
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	8f e0       	ldi	r24, 0x0F	; 15
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	60 81       	ld	r22, Z
    1e08:	0e 94 04 0c 	call	0x1808	; 0x1808 <EEPROM_writeByte>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e7       	ldi	r26, 0x70	; 112
    1e12:	b1 e4       	ldi	r27, 0x41	; 65
    1e14:	8d ab       	std	Y+53, r24	; 0x35
    1e16:	9e ab       	std	Y+54, r25	; 0x36
    1e18:	af ab       	std	Y+55, r26	; 0x37
    1e1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e20:	8f a9       	ldd	r24, Y+55	; 0x37
    1e22:	98 ad       	ldd	r25, Y+56	; 0x38
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a ef       	ldi	r20, 0xFA	; 250
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	89 ab       	std	Y+49, r24	; 0x31
    1e36:	9a ab       	std	Y+50, r25	; 0x32
    1e38:	ab ab       	std	Y+51, r26	; 0x33
    1e3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e3c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e3e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e40:	8b a9       	ldd	r24, Y+51	; 0x33
    1e42:	9c a9       	ldd	r25, Y+52	; 0x34
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <main+0x4b0>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	98 ab       	std	Y+48, r25	; 0x30
    1e5a:	8f a7       	std	Y+47, r24	; 0x2f
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <main+0x52e>
	else if (__tmp > 65535)
    1e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e60:	7a a9       	ldd	r23, Y+50	; 0x32
    1e62:	8b a9       	ldd	r24, Y+51	; 0x33
    1e64:	9c a9       	ldd	r25, Y+52	; 0x34
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <main+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	6d a9       	ldd	r22, Y+53	; 0x35
    1e78:	7e a9       	ldd	r23, Y+54	; 0x36
    1e7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <main+0x510>
    1ea0:	88 ec       	ldi	r24, 0xC8	; 200
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e a7       	std	Y+46, r25	; 0x2e
    1ea6:	8d a7       	std	Y+45, r24	; 0x2d
    1ea8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <main+0x4fe>
    1eb0:	9e a7       	std	Y+46, r25	; 0x2e
    1eb2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	98 ab       	std	Y+48, r25	; 0x30
    1ebc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <main+0x4f2>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <main+0x542>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ecc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ece:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	98 ab       	std	Y+48, r25	; 0x30
    1eda:	8f a7       	std	Y+47, r24	; 0x2f
    1edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ede:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee0:	9c a7       	std	Y+44, r25	; 0x2c
    1ee2:	8b a7       	std	Y+43, r24	; 0x2b
    1ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <main+0x53a>
    1eec:	9c a7       	std	Y+44, r25	; 0x2c
    1eee:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(15);
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e8 5b       	subi	r30, 0xB8	; 184
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	10 82       	st	Z, r1
    1ef8:	92 c0       	rjmp	.+292    	; 0x201e <main+0x670>
					EEPROM_writeByte(i, password[i]);
    1efa:	fe 01       	movw	r30, r28
    1efc:	e8 5b       	subi	r30, 0xB8	; 184
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	48 2f       	mov	r20, r24
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	fe 01       	movw	r30, r28
    1f08:	e8 5b       	subi	r30, 0xB8	; 184
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	ce 01       	movw	r24, r28
    1f14:	84 5b       	subi	r24, 0xB4	; 180
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	fc 01       	movw	r30, r24
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	20 81       	ld	r18, Z
    1f20:	ca 01       	movw	r24, r20
    1f22:	62 2f       	mov	r22, r18
    1f24:	0e 94 04 0c 	call	0x1808	; 0x1808 <EEPROM_writeByte>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	a0 e2       	ldi	r26, 0x20	; 32
    1f2e:	b1 e4       	ldi	r27, 0x41	; 65
    1f30:	8f a3       	std	Y+39, r24	; 0x27
    1f32:	98 a7       	std	Y+40, r25	; 0x28
    1f34:	a9 a7       	std	Y+41, r26	; 0x29
    1f36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f38:	6f a1       	ldd	r22, Y+39	; 0x27
    1f3a:	78 a5       	ldd	r23, Y+40	; 0x28
    1f3c:	89 a5       	ldd	r24, Y+41	; 0x29
    1f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	4a ef       	ldi	r20, 0xFA	; 250
    1f46:	54 e4       	ldi	r21, 0x44	; 68
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8b a3       	std	Y+35, r24	; 0x23
    1f52:	9c a3       	std	Y+36, r25	; 0x24
    1f54:	ad a3       	std	Y+37, r26	; 0x25
    1f56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f58:	6b a1       	ldd	r22, Y+35	; 0x23
    1f5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e8       	ldi	r20, 0x80	; 128
    1f66:	5f e3       	ldi	r21, 0x3F	; 63
    1f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6c:	88 23       	and	r24, r24
    1f6e:	2c f4       	brge	.+10     	; 0x1f7a <main+0x5cc>
		__ticks = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	9a a3       	std	Y+34, r25	; 0x22
    1f76:	89 a3       	std	Y+33, r24	; 0x21
    1f78:	3f c0       	rjmp	.+126    	; 0x1ff8 <main+0x64a>
	else if (__tmp > 65535)
    1f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f80:	9e a1       	ldd	r25, Y+38	; 0x26
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	3f ef       	ldi	r19, 0xFF	; 255
    1f86:	4f e7       	ldi	r20, 0x7F	; 127
    1f88:	57 e4       	ldi	r21, 0x47	; 71
    1f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8e:	18 16       	cp	r1, r24
    1f90:	4c f5       	brge	.+82     	; 0x1fe4 <main+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f92:	6f a1       	ldd	r22, Y+39	; 0x27
    1f94:	78 a5       	ldd	r23, Y+40	; 0x28
    1f96:	89 a5       	ldd	r24, Y+41	; 0x29
    1f98:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9a a3       	std	Y+34, r25	; 0x22
    1fb8:	89 a3       	std	Y+33, r24	; 0x21
    1fba:	0f c0       	rjmp	.+30     	; 0x1fda <main+0x62c>
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	98 a3       	std	Y+32, r25	; 0x20
    1fc2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc6:	98 a1       	ldd	r25, Y+32	; 0x20
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <main+0x61a>
    1fcc:	98 a3       	std	Y+32, r25	; 0x20
    1fce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fd2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	9a a3       	std	Y+34, r25	; 0x22
    1fd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fda:	89 a1       	ldd	r24, Y+33	; 0x21
    1fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	69 f7       	brne	.-38     	; 0x1fbc <main+0x60e>
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <main+0x65e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fea:	9e a1       	ldd	r25, Y+38	; 0x26
    1fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	9a a3       	std	Y+34, r25	; 0x22
    1ff6:	89 a3       	std	Y+33, r24	; 0x21
    1ff8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ffa:	9a a1       	ldd	r25, Y+34	; 0x22
    1ffc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    2000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2002:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	f1 f7       	brne	.-4      	; 0x2004 <main+0x656>
    2008:	9e 8f       	std	Y+30, r25	; 0x1e
    200a:	8d 8f       	std	Y+29, r24	; 0x1d

			if (isPassMatched) {
				UART_sendByte(MATCHED);
				EEPROM_writeByte(0x0F, isPassMatched);
				_delay_ms(15);
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    200c:	de 01       	movw	r26, r28
    200e:	a8 5b       	subi	r26, 0xB8	; 184
    2010:	bf 4f       	sbci	r27, 0xFF	; 255
    2012:	fe 01       	movw	r30, r28
    2014:	e8 5b       	subi	r30, 0xB8	; 184
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	8f 5f       	subi	r24, 0xFF	; 255
    201c:	8c 93       	st	X, r24
    201e:	fe 01       	movw	r30, r28
    2020:	e8 5b       	subi	r30, 0xB8	; 184
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	85 30       	cpi	r24, 0x05	; 5
    2028:	08 f4       	brcc	.+2      	; 0x202c <main+0x67e>
    202a:	67 cf       	rjmp	.-306    	; 0x1efa <main+0x54c>
    202c:	03 c0       	rjmp	.+6      	; 0x2034 <main+0x686>
					EEPROM_writeByte(i, password[i]);
					_delay_ms(10);
				}
			} else {
				UART_sendByte(UNMATCHED);
    202e:	85 e3       	ldi	r24, 0x35	; 53
    2030:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e2       	ldi	r26, 0x20	; 32
    203a:	b1 e4       	ldi	r27, 0x41	; 65
    203c:	89 8f       	std	Y+25, r24	; 0x19
    203e:	9a 8f       	std	Y+26, r25	; 0x1a
    2040:	ab 8f       	std	Y+27, r26	; 0x1b
    2042:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	69 8d       	ldd	r22, Y+25	; 0x19
    2046:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2048:	8b 8d       	ldd	r24, Y+27	; 0x1b
    204a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a ef       	ldi	r20, 0xFA	; 250
    2052:	54 e4       	ldi	r21, 0x44	; 68
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8d 8b       	std	Y+21, r24	; 0x15
    205e:	9e 8b       	std	Y+22, r25	; 0x16
    2060:	af 8b       	std	Y+23, r26	; 0x17
    2062:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2064:	6d 89       	ldd	r22, Y+21	; 0x15
    2066:	7e 89       	ldd	r23, Y+22	; 0x16
    2068:	8f 89       	ldd	r24, Y+23	; 0x17
    206a:	98 8d       	ldd	r25, Y+24	; 0x18
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <main+0x6d8>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9c 8b       	std	Y+20, r25	; 0x14
    2082:	8b 8b       	std	Y+19, r24	; 0x13
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <main+0x756>
	else if (__tmp > 65535)
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <main+0x742>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	69 8d       	ldd	r22, Y+25	; 0x19
    20a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <main+0x738>
    20c8:	88 ec       	ldi	r24, 0xC8	; 200
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9a 8b       	std	Y+18, r25	; 0x12
    20ce:	89 8b       	std	Y+17, r24	; 0x11
    20d0:	89 89       	ldd	r24, Y+17	; 0x11
    20d2:	9a 89       	ldd	r25, Y+18	; 0x12
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <main+0x726>
    20d8:	9a 8b       	std	Y+18, r25	; 0x12
    20da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8b 89       	ldd	r24, Y+19	; 0x13
    20de:	9c 89       	ldd	r25, Y+20	; 0x14
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8b 89       	ldd	r24, Y+19	; 0x13
    20e8:	9c 89       	ldd	r25, Y+20	; 0x14
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <main+0x71a>
    20ee:	cc cd       	rjmp	.-1128   	; 0x1c88 <main+0x2da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9c 8b       	std	Y+20, r25	; 0x14
    2102:	8b 8b       	std	Y+19, r24	; 0x13
    2104:	8b 89       	ldd	r24, Y+19	; 0x13
    2106:	9c 89       	ldd	r25, Y+20	; 0x14
    2108:	98 8b       	std	Y+16, r25	; 0x10
    210a:	8f 87       	std	Y+15, r24	; 0x0f
    210c:	8f 85       	ldd	r24, Y+15	; 0x0f
    210e:	98 89       	ldd	r25, Y+16	; 0x10
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <main+0x762>
    2114:	98 8b       	std	Y+16, r25	; 0x10
    2116:	8f 87       	std	Y+15, r24	; 0x0f
    2118:	b7 cd       	rjmp	.-1170   	; 0x1c88 <main+0x2da>
			}
			_delay_ms(10);
			break;

		case SEND_MAIN_PASSWORD:
			isPassMatched = 1;
    211a:	fe 01       	movw	r30, r28
    211c:	e5 5b       	subi	r30, 0xB5	; 181
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 83       	st	Z, r24
			receivePass(password);
    2124:	ce 01       	movw	r24, r28
    2126:	84 5b       	subi	r24, 0xB4	; 180
    2128:	9f 4f       	sbci	r25, 0xFF	; 255
    212a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <receivePass>
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    212e:	fe 01       	movw	r30, r28
    2130:	e9 5b       	subi	r30, 0xB9	; 185
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	10 82       	st	Z, r1
    2136:	9e c0       	rjmp	.+316    	; 0x2274 <main+0x8c6>
				uint8 pass_digit;
				EEPROM_readByte(i, &pass_digit);
    2138:	fe 01       	movw	r30, r28
    213a:	e9 5b       	subi	r30, 0xB9	; 185
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	88 2f       	mov	r24, r24
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9e 01       	movw	r18, r28
    2146:	27 59       	subi	r18, 0x97	; 151
    2148:	3f 4f       	sbci	r19, 0xFF	; 255
    214a:	b9 01       	movw	r22, r18
    214c:	0e 94 45 0c 	call	0x188a	; 0x188a <EEPROM_readByte>
				if (password[i] != pass_digit)
    2150:	fe 01       	movw	r30, r28
    2152:	e9 5b       	subi	r30, 0xB9	; 185
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	ce 01       	movw	r24, r28
    215e:	84 5b       	subi	r24, 0xB4	; 180
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	90 81       	ld	r25, Z
    216a:	fe 01       	movw	r30, r28
    216c:	e7 59       	subi	r30, 0x97	; 151
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	80 81       	ld	r24, Z
    2172:	98 17       	cp	r25, r24
    2174:	21 f0       	breq	.+8      	; 0x217e <main+0x7d0>
					isPassMatched = 0;
    2176:	fe 01       	movw	r30, r28
    2178:	e5 5b       	subi	r30, 0xB5	; 181
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	10 82       	st	Z, r1
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	a0 e2       	ldi	r26, 0x20	; 32
    2184:	b1 e4       	ldi	r27, 0x41	; 65
    2186:	8b 87       	std	Y+11, r24	; 0x0b
    2188:	9c 87       	std	Y+12, r25	; 0x0c
    218a:	ad 87       	std	Y+13, r26	; 0x0d
    218c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2190:	7c 85       	ldd	r23, Y+12	; 0x0c
    2192:	8d 85       	ldd	r24, Y+13	; 0x0d
    2194:	9e 85       	ldd	r25, Y+14	; 0x0e
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4a ef       	ldi	r20, 0xFA	; 250
    219c:	54 e4       	ldi	r21, 0x44	; 68
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8f 83       	std	Y+7, r24	; 0x07
    21a8:	98 87       	std	Y+8, r25	; 0x08
    21aa:	a9 87       	std	Y+9, r26	; 0x09
    21ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ae:	6f 81       	ldd	r22, Y+7	; 0x07
    21b0:	78 85       	ldd	r23, Y+8	; 0x08
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e8       	ldi	r20, 0x80	; 128
    21bc:	5f e3       	ldi	r21, 0x3F	; 63
    21be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c2:	88 23       	and	r24, r24
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <main+0x822>
		__ticks = 1;
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	3f c0       	rjmp	.+126    	; 0x224e <main+0x8a0>
	else if (__tmp > 65535)
    21d0:	6f 81       	ldd	r22, Y+7	; 0x07
    21d2:	78 85       	ldd	r23, Y+8	; 0x08
    21d4:	89 85       	ldd	r24, Y+9	; 0x09
    21d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	3f ef       	ldi	r19, 0xFF	; 255
    21dc:	4f e7       	ldi	r20, 0x7F	; 127
    21de:	57 e4       	ldi	r21, 0x47	; 71
    21e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e4:	18 16       	cp	r1, r24
    21e6:	4c f5       	brge	.+82     	; 0x223a <main+0x88c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e2       	ldi	r20, 0x20	; 32
    21f6:	51 e4       	ldi	r21, 0x41	; 65
    21f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	bc 01       	movw	r22, r24
    2202:	cd 01       	movw	r24, r26
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	0f c0       	rjmp	.+30     	; 0x2230 <main+0x882>
    2212:	88 ec       	ldi	r24, 0xC8	; 200
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9c 83       	std	Y+4, r25	; 0x04
    2218:	8b 83       	std	Y+3, r24	; 0x03
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <main+0x870>
    2222:	9c 83       	std	Y+4, r25	; 0x04
    2224:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	00 97       	sbiw	r24, 0x00	; 0
    2236:	69 f7       	brne	.-38     	; 0x2212 <main+0x864>
    2238:	14 c0       	rjmp	.+40     	; 0x2262 <main+0x8b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	8d 81       	ldd	r24, Y+5	; 0x05
    2250:	9e 81       	ldd	r25, Y+6	; 0x06
    2252:	9a 83       	std	Y+2, r25	; 0x02
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <main+0x8ac>
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
			break;

		case SEND_MAIN_PASSWORD:
			isPassMatched = 1;
			receivePass(password);
			for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    2262:	de 01       	movw	r26, r28
    2264:	a9 5b       	subi	r26, 0xB9	; 185
    2266:	bf 4f       	sbci	r27, 0xFF	; 255
    2268:	fe 01       	movw	r30, r28
    226a:	e9 5b       	subi	r30, 0xB9	; 185
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	8f 5f       	subi	r24, 0xFF	; 255
    2272:	8c 93       	st	X, r24
    2274:	fe 01       	movw	r30, r28
    2276:	e9 5b       	subi	r30, 0xB9	; 185
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 81       	ld	r24, Z
    227c:	85 30       	cpi	r24, 0x05	; 5
    227e:	08 f4       	brcc	.+2      	; 0x2282 <main+0x8d4>
    2280:	5b cf       	rjmp	.-330    	; 0x2138 <main+0x78a>
				if (password[i] != pass_digit)
					isPassMatched = 0;
				_delay_ms(10);
			}

			if (isPassMatched)
    2282:	fe 01       	movw	r30, r28
    2284:	e5 5b       	subi	r30, 0xB5	; 181
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 81       	ld	r24, Z
    228a:	88 23       	and	r24, r24
    228c:	21 f0       	breq	.+8      	; 0x2296 <main+0x8e8>
				UART_sendByte(CORRECT_PASSWORD);
    228e:	87 e3       	ldi	r24, 0x37	; 55
    2290:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
    2294:	f9 cc       	rjmp	.-1550   	; 0x1c88 <main+0x2da>
			else
				UART_sendByte(WRONG_PASSWORD);
    2296:	88 e3       	ldi	r24, 0x38	; 56
    2298:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_sendByte>
    229c:	f5 cc       	rjmp	.-1558   	; 0x1c88 <main+0x2da>
			break;

		case OPEN_DOOR:
			g_timerticks = 0;
    229e:	10 92 7c 00 	sts	0x007C, r1
			Timer1_init(&Timer1_Config);
    22a2:	ce 01       	movw	r24, r28
    22a4:	8d 59       	subi	r24, 0x9D	; 157
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Timer1_init>
			DcMotor_Rotate(CW, 100);
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	64 e6       	ldi	r22, 0x64	; 100
    22b0:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
			while (g_timerticks != 15);
    22b4:	80 91 7c 00 	lds	r24, 0x007C
    22b8:	8f 30       	cpi	r24, 0x0F	; 15
    22ba:	e1 f7       	brne	.-8      	; 0x22b4 <main+0x906>

			Timer1_deInit();
    22bc:	0e 94 c0 09 	call	0x1380	; 0x1380 <Timer1_deInit>
			g_timerticks = 0;
    22c0:	10 92 7c 00 	sts	0x007C, r1
			Timer1_init(&Timer1_Config);
    22c4:	ce 01       	movw	r24, r28
    22c6:	8d 59       	subi	r24, 0x9D	; 157
    22c8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ca:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Timer1_init>
			DcMotor_Rotate(STOP, 0);
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
			while (g_timerticks != 3);
    22d6:	80 91 7c 00 	lds	r24, 0x007C
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	e1 f7       	brne	.-8      	; 0x22d6 <main+0x928>

			Timer1_deInit();
    22de:	0e 94 c0 09 	call	0x1380	; 0x1380 <Timer1_deInit>
			g_timerticks = 0;
    22e2:	10 92 7c 00 	sts	0x007C, r1
			Timer1_init(&Timer1_Config);
    22e6:	ce 01       	movw	r24, r28
    22e8:	8d 59       	subi	r24, 0x9D	; 157
    22ea:	9f 4f       	sbci	r25, 0xFF	; 255
    22ec:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Timer1_init>
			DcMotor_Rotate(ACW, 100);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	64 e6       	ldi	r22, 0x64	; 100
    22f4:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
			while (g_timerticks != 15);
    22f8:	80 91 7c 00 	lds	r24, 0x007C
    22fc:	8f 30       	cpi	r24, 0x0F	; 15
    22fe:	e1 f7       	brne	.-8      	; 0x22f8 <main+0x94a>

			Timer1_deInit();
    2300:	0e 94 c0 09 	call	0x1380	; 0x1380 <Timer1_deInit>
			DcMotor_Rotate(STOP, 0);
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	0e 94 bf 0b 	call	0x177e	; 0x177e <DcMotor_Rotate>
    230c:	bd cc       	rjmp	.-1670   	; 0x1c88 <main+0x2da>
			break;

		case ALARM_MODE:
			g_timerticks = 0;
    230e:	10 92 7c 00 	sts	0x007C, r1
			Timer1_init(&Timer1_Config);
    2312:	ce 01       	movw	r24, r28
    2314:	8d 59       	subi	r24, 0x9D	; 157
    2316:	9f 4f       	sbci	r25, 0xFF	; 255
    2318:	0e 94 64 09 	call	0x12c8	; 0x12c8 <Timer1_init>
			Buzzer_on();
    231c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <Buzzer_on>
			while (g_timerticks != 60);
    2320:	80 91 7c 00 	lds	r24, 0x007C
    2324:	8c 33       	cpi	r24, 0x3C	; 60
    2326:	e1 f7       	brne	.-8      	; 0x2320 <main+0x972>

			Timer1_deInit();
    2328:	0e 94 c0 09 	call	0x1380	; 0x1380 <Timer1_deInit>
			Buzzer_off();
    232c:	0e 94 98 0b 	call	0x1730	; 0x1730 <Buzzer_off>
    2330:	ab cc       	rjmp	.-1706   	; 0x1c88 <main+0x2da>

00002332 <__udivmodsi4>:
    2332:	a1 e2       	ldi	r26, 0x21	; 33
    2334:	1a 2e       	mov	r1, r26
    2336:	aa 1b       	sub	r26, r26
    2338:	bb 1b       	sub	r27, r27
    233a:	fd 01       	movw	r30, r26
    233c:	0d c0       	rjmp	.+26     	; 0x2358 <__udivmodsi4_ep>

0000233e <__udivmodsi4_loop>:
    233e:	aa 1f       	adc	r26, r26
    2340:	bb 1f       	adc	r27, r27
    2342:	ee 1f       	adc	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	a2 17       	cp	r26, r18
    2348:	b3 07       	cpc	r27, r19
    234a:	e4 07       	cpc	r30, r20
    234c:	f5 07       	cpc	r31, r21
    234e:	20 f0       	brcs	.+8      	; 0x2358 <__udivmodsi4_ep>
    2350:	a2 1b       	sub	r26, r18
    2352:	b3 0b       	sbc	r27, r19
    2354:	e4 0b       	sbc	r30, r20
    2356:	f5 0b       	sbc	r31, r21

00002358 <__udivmodsi4_ep>:
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	1a 94       	dec	r1
    2362:	69 f7       	brne	.-38     	; 0x233e <__udivmodsi4_loop>
    2364:	60 95       	com	r22
    2366:	70 95       	com	r23
    2368:	80 95       	com	r24
    236a:	90 95       	com	r25
    236c:	9b 01       	movw	r18, r22
    236e:	ac 01       	movw	r20, r24
    2370:	bd 01       	movw	r22, r26
    2372:	cf 01       	movw	r24, r30
    2374:	08 95       	ret

00002376 <__prologue_saves__>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ca 1b       	sub	r28, r26
    23a0:	db 0b       	sbc	r29, r27
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	09 94       	ijmp

000023ae <__epilogue_restores__>:
    23ae:	2a 88       	ldd	r2, Y+18	; 0x12
    23b0:	39 88       	ldd	r3, Y+17	; 0x11
    23b2:	48 88       	ldd	r4, Y+16	; 0x10
    23b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    23bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23be:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c0:	b9 84       	ldd	r11, Y+9	; 0x09
    23c2:	c8 84       	ldd	r12, Y+8	; 0x08
    23c4:	df 80       	ldd	r13, Y+7	; 0x07
    23c6:	ee 80       	ldd	r14, Y+6	; 0x06
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	0c 81       	ldd	r16, Y+4	; 0x04
    23cc:	1b 81       	ldd	r17, Y+3	; 0x03
    23ce:	aa 81       	ldd	r26, Y+2	; 0x02
    23d0:	b9 81       	ldd	r27, Y+1	; 0x01
    23d2:	ce 0f       	add	r28, r30
    23d4:	d1 1d       	adc	r29, r1
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	ed 01       	movw	r28, r26
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
